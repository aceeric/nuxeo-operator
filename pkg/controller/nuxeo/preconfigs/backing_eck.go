package preconfigs

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"nuxeo-operator/pkg/apis/nuxeo/v1alpha1"
)

// returns a backing service configured to connect to ECK. The resource name in the passed pre-config
// is the name of an 'elasticsearch.k8s.elastic.co' resource in the namespace.
func EckBacking(preCfg v1alpha1.PreconfiguredBackingService, backingMountBase string) (v1alpha1.BackingService, error) {
	const trustStore = "elastic.ca.jks"
	opts, err := ParsePreconfigOpts(preCfg)
	if err != nil {
		return v1alpha1.BackingService{}, err
	}
	user := opts["user"]
	bsvc := v1alpha1.BackingService{
		Name: "elastic",
		// first resource converts the ECK tls.crt into a Java trust store
		Resources: []v1alpha1.BackingServiceResource{{
			GroupVersionKind: metav1.GroupVersionKind{
				Group:   "",
				Version: "v1",
				Kind:    "secret",
			},
			Name: preCfg.Resource + "-es-http-certs-public",
			Projections: []v1alpha1.ResourceProjection{{
				Transform: v1alpha1.CertTransform{
					Type:     "TrustStore",
					Cert:     "tls.crt",
					Store:    trustStore,
					Password: "elastic.truststore.pass",
					PassEnv:  "ELASTIC_TS_PASS",
				},
			}},
		}},
		// The URL is always a service named <elasticsearch resource name>-es-http. The trust store and
		// password are generated by the TrustStore transform above. Only JKS is presently supported.
		NuxeoConf: "elasticsearch.client=RestClient\n" +
			"elasticsearch.restClient.password=${env:ELASTIC_PASSWORD}\n" +
			"elasticsearch.addressList=https://" + preCfg.Resource + "-es-http:9200\n" +
			"elasticsearch.restClient.truststore.path=" + backingMountBase + "elastic/" + trustStore + "\n" +
			"elasticsearch.restClient.truststore.password=${env:ELASTIC_TS_PASS}\n" +
			"elasticsearch.restClient.truststore.type=JKS\n",
	}
	// configure the user
	var res v1alpha1.BackingServiceResource
	if user == "" {
		// use the built-in elastic user which is created by ECK as <elastic CR name>-es-elastic-user
		res = v1alpha1.BackingServiceResource{
			GroupVersionKind: metav1.GroupVersionKind{
				Group:   "",
				Version: "v1",
				Kind:    "secret",
			},
			Name: preCfg.Resource + "-es-elastic-user",
			Projections: []v1alpha1.ResourceProjection{{
				From: "elastic",
				Env:  "ELASTIC_PASSWORD",
			}},
		}
		bsvc.NuxeoConf += "elasticsearch.restClient.username=elastic\n"
	} else {
		// use a secret provided by the configurer containing keys 'user' and 'password'
		res = v1alpha1.BackingServiceResource{
			GroupVersionKind: metav1.GroupVersionKind{
				Group:   "",
				Version: "v1",
				Kind:    "secret",
			},
			Name: user,
			Projections: []v1alpha1.ResourceProjection{{
				From: "user",
				Env:  "ELASTIC_USER",
			}, {
				From: "password",
				Env:  "ELASTIC_PASSWORD",
			}},
		}
		bsvc.NuxeoConf += "elasticsearch.restClient.username=${env:ELASTIC_USER}\n"
	}
	bsvc.Resources = append(bsvc.Resources, res)
	return bsvc, nil
}
