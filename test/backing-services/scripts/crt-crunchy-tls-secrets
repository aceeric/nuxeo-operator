#!/usr/bin/env bash
#
# adapted from: https://info.crunchydata.com/blog/ssl-certificate-authentication-postgresql-docker-containers
# Creates secrets to support Postgres TLS
#

BASE="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
pgcluster=crunchypg

dir=$(mktemp -d)
# eliminate openssl .rnd complaint?
[[ -f $HOME/.rnd ]] || touch $HOME/.rnd

mkdir $dir/keys $dir/certs $dir/pgconf

# Create a key-pair that will serve both as the root CA and the server key-pair
# the "ca.crt" name is used to match what it expects later
if ! openssl req -new -x509 -days 365 -nodes -out $dir/certs/ca.crt\
 -keyout $dir/keys/ca.key -subj "/CN=root-ca" &>/dev/null; then
  rm  -rf $dir &>/dev/null
  echo FAIL>/dev/null
  exit 1
fi
cp $dir/certs/ca.crt $dir/pgconf/ca.crt

# Create the server key and CSR and sign with root key
if ! openssl req -new -nodes -out $dir/server.csr\
 -keyout $dir/pgconf/server.key -subj "/CN=localhost" &>/dev/null; then
  rm  -rf $dir &>/dev/null
  echo FAIL
  exit 1
fi
if ! openssl x509 -req -in $dir/server.csr -days 365\
 -CA $dir/certs/ca.crt -CAkey $dir/keys/ca.key -CAcreateserial\
 -out $dir/pgconf/server.crt &>/dev/null; then
  rm  -rf $dir &>/dev/null
  echo FAIL
  exit 1
fi

# remove the CSR as it is no longer needed
rm $dir/server.csr

# create cluster custom config ConfigMap that will be referenced by the Pgcluster CR
cat <<EOF | tee\
 "$BASE/stacks/crunchy-mutual-tls/$pgcluster-custom-config.yaml"\
 "$BASE/stacks/crunchy-tls/$pgcluster-custom-config.yaml" >/dev/null
apiVersion: v1
kind: ConfigMap
metadata:
  name: $pgcluster-custom-config
  labels:
    pg-cluster: $pgcluster
data:
  postgresql.conf: |
    listen_addresses = '*'
    port = 5432
    max_connections = 20
    shared_buffers = 128MB
    temp_buffers = 8MB
    work_mem = 4MB
    wal_level = replica
    max_wal_senders = 3
    shared_preload_libraries = 'pgaudit.so,pg_stat_statements.so'
    # password_encryption = 'scram-sha-256'
    ssl = on # this enables SSL
    # BEGIN EACE ADDED
    ssl_ciphers = 'HIGH:MEDIUM:+3DES:!aNULL'
    ssl_prefer_server_ciphers = on
    # END EACE ADDED
    # crunchy operator mounts these under /pgconf/tls
    ssl_cert_file = '/pgconf/tls/tls.crt'
    ssl_key_file = '/pgconf/tls/tls.key'
    ssl_ca_file = '/pgconf/tls/ca.crt'
  pg_hba.conf: |
    # TYPE  DATABASE        USER            ADDRESS                 METHOD
    local   all             postgres                                peer
    hostssl all             postgres        ::/0                    reject
    hostssl all             postgres        0.0.0.0/0               reject
    hostssl all             all             ::/0                    cert
    hostssl all             all             0.0.0.0/0               cert
EOF

# create a CA secret to ref in Pgcluster.Spec.TLS.CASecret of the Pgcluster CR which the operator
# will mount into /pgconf/tls so will be referenced by postgresql.conf injected via the CM above
cat <<EOF | tee\
 "$BASE/stacks/crunchy-mutual-tls/$pgcluster-ca-secret.yaml"\
 "$BASE/stacks/crunchy-tls/$pgcluster-ca-secret.yaml" >/dev/null
apiVersion: v1
kind: Secret
metadata:
  name: $pgcluster-ca-secret
  labels:
    pg-cluster: $pgcluster
stringData:
  ca.crt: |
$(sed  's/^/    /' "$dir/certs/ca.crt")
EOF

# create a TLS secret to ref in Pgcluster.Spec.TLS.TLSSecret of the Pgcluster CR. This is signed by
# the CA so when the CA is injected into the Nuxeo container Nuxeo will trust the Postgres server
cat <<EOF | tee\
 "$BASE/stacks/crunchy-mutual-tls/$pgcluster-tls-secret.yaml"\
 "$BASE/stacks/crunchy-tls/$pgcluster-tls-secret.yaml" >/dev/null
apiVersion: v1
kind: Secret
metadata:
  name: $pgcluster-tls-secret
  labels:
    pg-cluster: $pgcluster
stringData:
  tls.crt: |
$(sed  's/^/    /' "$dir/pgconf/server.crt")
  tls.key: |
$(sed  's/^/    /' "$dir/pgconf/server.key")
EOF

# everything below is only for mutual TLS

MY_USER_NAME_FOR_CERT=nuxeo
if ! openssl req -new -nodes -out $dir/client.csr \
  -keyout $dir/keys/client.key -subj "/CN=$MY_USER_NAME_FOR_CERT" &>/dev/null; then
  rm  -rf $dir &>/dev/null
  echo FAIL
  exit 1
fi
if ! openssl x509 -req -in $dir/client.csr -days 365 \
    -CA $dir/certs/ca.crt -CAkey $dir/keys/ca.key -CAcreateserial \
    -out $dir/certs/client.crt &>/dev/null; then
  rm  -rf $dir &>/dev/null
  echo FAIL
  exit 1
fi
rm $dir/client.csr

# create a Client secret for mutual TLS
cat <<EOF >| "$BASE/stacks/crunchy-mutual-tls/$pgcluster-client-tls-secret.yaml"
apiVersion: v1
kind: Secret
metadata:
  name: $pgcluster-client-tls-secret
  labels:
    pg-cluster: $pgcluster
stringData:
  tls.crt: |
$(sed  's/^/    /' "$dir/certs/client.crt")
  tls.key: |
$(sed  's/^/    /' "$dir/keys/client.key")
EOF

rm -rf $dir
echo PASS
exit 0