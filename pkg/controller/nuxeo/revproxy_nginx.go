package nuxeo

import (
	"strings"

	"k8s.io/api/core/v1"
	"nuxeo-operator/pkg/apis/nuxeo/v1alpha1"
)

// Configures Nginx as the reverse proxy by adding a sidecar Container and adding Volumes into the
// passed Deployment as specified in the passed Nginx rev proxy spec
func configureNginx(spec *v1.PodSpec, nginx v1alpha1.NginxRevProxySpec) {
	spec.Containers = append(spec.Containers, nginxContainer(nginx))
	spec.Volumes = append(spec.Volumes, nginxVolumes(nginx)...)
}

// nginxContainer creates and returns a Container struct defining the Nginx reverse proxy. It defines various
// volume mounts which - therefore - must also be defined in the deployment that ultimately holds this container
// struct.
func nginxContainer(nginx v1alpha1.NginxRevProxySpec) v1.Container {
	nginxImage := "nginx:latest"
	if nginx.Image != "" {
		nginxImage = nginx.Image
	}
	var pullPolicy = v1.PullIfNotPresent
	if nginx.ImagePullPolicy == "" {
		if strings.HasSuffix(nginxImage, ":latest") {
			pullPolicy = v1.PullAlways
		}
	} else {
		pullPolicy = nginx.ImagePullPolicy
	}
	c := v1.Container{
		Name:            "nginx",
		Image:           nginxImage,
		ImagePullPolicy: pullPolicy,
		Ports: []v1.ContainerPort{{
			Name:          "nginx-port",
			ContainerPort: 8443,
			Protocol:      "TCP",
		}},
		VolumeMounts: []v1.VolumeMount{{
			Name:      "nginx-cert",
			ReadOnly:  true,
			MountPath: "/etc/secrets/",
		}, {
			Name:      "nginx-conf",
			ReadOnly:  true,
			MountPath: "/etc/nginx/",
		}, {
			Name:      "nginx-cache",
			ReadOnly:  false,
			MountPath: "/var/cache/nginx",
		}, {
			Name:      "nginx-tmp",
			ReadOnly:  false,
			MountPath: "/var/tmp",
		}},
	}
	return c
}

// nginxVolumes creates and returns a slice of Volume specs that support the VolumeMounts generated by the
// 'nginxContainer' function. Expectation is that these items will be added by the caller into a Deployment
func nginxVolumes(nginx v1alpha1.NginxRevProxySpec) []v1.Volume {
	vols := []v1.Volume{{
		Name: "nginx-conf",
		VolumeSource: v1.VolumeSource{
			ConfigMap: &v1.ConfigMapVolumeSource{
				LocalObjectReference: v1.LocalObjectReference{Name: nginx.ConfigMap},
			},
		},
	}, {
		Name: "nginx-cert",
		VolumeSource: v1.VolumeSource{
			Secret: &v1.SecretVolumeSource{
				SecretName: nginx.Secret,
			},
		},
	}, {
		Name: "nginx-cache",
		VolumeSource: v1.VolumeSource{
			EmptyDir: &v1.EmptyDirVolumeSource{},
		},
	}, {
		Name: "nginx-tmp",
		VolumeSource: v1.VolumeSource{
			EmptyDir: &v1.EmptyDirVolumeSource{},
		},
	}}
	return vols
}

