#!/usr/bin/env bash
# adapted from https://www.percona.com/doc/kubernetes-operator-for-psmongodb/TLS.html#generate-certificates-manually

BASE="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
dir=$(mktemp -d)
if ! pushd "$dir"; then
  echo FAIL
  exit 1
fi

CLUSTER_NAME=percona-mongo-rs0

# creates ca.csr ca-key.pem ca.pem
cat <<EOF | cfssl gencert -initca - | cfssljson -bare ca
  {
    "CN": "Root CA",
    "key": {
      "algo": "rsa",
      "size": 2048
    }
  }
EOF

cat <<EOF > ca-config.json
  {
    "signing": {
      "default": {
        "expiry": "87600h",
        "usages": ["signing", "key encipherment", "server auth", "client auth"]
      }
    }
  }
EOF

# creates server.csr server-key.pem server.pem
cat <<EOF | cfssl gencert -ca=ca.pem  -ca-key=ca-key.pem -config=./ca-config.json - | cfssljson -bare server
  {
    "hosts": [
      "${CLUSTER_NAME}",
      "*.${CLUSTER_NAME}"
    ],
    "CN": "${CLUSTER_NAME/-rs0}",
    "key": {
      "algo": "rsa",
      "size": 2048
    }
  }
EOF

# creates server-bundle.pem (not sure why as the resulting file is not referenced in the instructions...
cfssl bundle -ca-bundle=ca.pem -cert=server.pem | cfssljson -bare server

cat <<EOF >| "$BASE/stacks/percona-mongo-explicit/percona-mongo-ssl-internal.yaml"
apiVersion: v1
kind: Secret
type: kubernetes.io/tls
metadata:
  name: percona-mongo-ssl-internal
stringData:
  ca.crt: |
$(sed  's/^/    /' "ca.pem")
  tls.crt: |
$(sed  's/^/    /' "server.pem")
  tls.key: |
$(sed  's/^/    /' "server-key.pem")
EOF

cat <<EOF | cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=./ca-config.json - | cfssljson -bare client
  {
    "hosts": [
      "${CLUSTER_NAME}",
      "*.${CLUSTER_NAME}"
    ],
    "CN": "${CLUSTER_NAME/-rs0}",
    "key": {
      "algo": "rsa",
      "size": 2048
    }
  }
EOF

# cfssl generates keys  in PKCS#1 and the Mongo Java client doesn't like that so convert the client key to PKCS#8
openssl pkcs8 -topk8 -nocrypt -in client-key.pem -out client-key-pkcs8.pem

cat <<EOF >| "$BASE/stacks/percona-mongo-explicit/percona-mongo-ssl.yaml"
apiVersion: v1
kind: Secret
type: kubernetes.io/tls
metadata:
  name: percona-mongo-ssl
stringData:
  ca.crt: |
$(sed  's/^/    /' "ca.pem")
  tls.crt: |
$(sed  's/^/    /' "client.pem")
  tls.key: |
$(sed  's/^/    /' "client-key-pkcs8.pem")
EOF

popd
rm -rf $dir
echo PASS
exit 0