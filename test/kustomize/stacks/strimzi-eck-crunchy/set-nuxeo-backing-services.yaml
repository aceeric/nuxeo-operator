- op: replace
  path: /spec/backingServices
  value:
    # ECK ElasticSearch with builtin elastic user and one-way TLS. The backing service name ('eck' in this case)
    # is used by the operator as a subdirectory under /etc/nuxeo-operator/binding for all mount projections and
    # must therefore by used by the configurer in any nuxeo.conf path references to resource projections
    - name: eck
      resources:
      - group: ""
        version: v1
        kind: secret
        name: elastic-es-http-certs-public
        projections:
        - transform:
            type: TrustStore
            cert: tls.crt
            store: elastic.ca.jks
            password: elastic.truststore.pass
            passEnv: ELASTIC_TS_PASS
      - group: ""
        version: v1
        kind: secret
        name: elastic-es-elastic-user
        projections:
        - from: elastic
          env: ELASTIC_PASSWORD
      nuxeoConf: |
        elasticsearch.client=RestClient
        elasticsearch.restClient.username=elastic
        elasticsearch.restClient.password=${env:ELASTIC_PASSWORD}
        elasticsearch.addressList=https://elastic-es-http:9200
        elasticsearch.restClient.truststore.path=/etc/nuxeo-operator/binding/eck/elastic.ca.jks
        elasticsearch.restClient.truststore.password=${env:ELASTIC_TS_PASS}
        elasticsearch.restClient.truststore.type=JKS
    # Crunchy PostgreSQL user/pass no encryption
    - name: crunchy
      resources:
      - group: crunchydata.com
        version: v1
        kind: Pgcluster
        name: crunchypg
        projections:
        # This projection is a jsonPath expr into the Pgcluster resource which the Nuxeo operator projects into the
        # deployment
        - from: "{.spec.port}"
          env: PGPORT
          value: true
      - group: ""
        version: v1
        kind: Secret
        name: crunchypg-nuxeo-secret
        projections:
        - from: username
          env: PGUSER
        - from: password
          env: PGPASSWORD
      template: postgresql
      nuxeoConf: |
        nuxeo.db.host=crunchypg
        nuxeo.db.port=${env:PGPORT}
        nuxeo.db.name=nuxeo
        nuxeo.db.user=${env:PGUSER}
        nuxeo.db.password=${env:PGPASSWORD}
    # Strimzi Kafka mutual tls
    - name: mykafka
      resources:
      - group: ""
        version: v1
        kind: Secret
        name: strimzi-cluster-ca-cert
        projections:
        - from: ca.password
          env: KAFKA_TRUSTSTORE_PASS
        - from: ca.p12
          mount: truststore.p12
      - group: ""
        version: v1
        kind: Secret
        # Strimzi operator creates a secret with the same name as the KafkaUser CR name (see kafkauser.yaml)
        name: nxkafka
        projections:
        - from: user.password
          env: KAFKA_KEYSTORE_PASS
        - from: user.p12
          mount: keystore.p12
      nuxeoConf: |
        kafka.enabled=true
        kafka.ssl=true
        # strimzi.yaml defines 'strimzi' as the Kafka cluster name so the Strimzi operator creates a service
        # named [strimzi]-kafka-bootstrap. We could have named the cluster 'foo', in which case the Strimzi operator
        # would have created service foo-kafka-bootstrap. This is TLS so we know Strimzi will configure the
        # bootstrap service to listen on 9093
        kafka.bootstrap.servers=strimzi-kafka-bootstrap:9093
        kafka.truststore.type=PKCS12
        # here, mykafka is a subdirectory mounted by the Nuxeo operator because this backing service is named mykafka
        kafka.truststore.path=/etc/nuxeo-operator/binding/mykafka/truststore.p12
        kafka.truststore.password=${env:KAFKA_TRUSTSTORE_PASS}
        kafka.keystore.type=PKCS12
        kafka.keystore.path=/etc/nuxeo-operator/binding/mykafka/keystore.p12
        kafka.keystore.password=${env:KAFKA_KEYSTORE_PASS}
